import importlib
import re
import time
from platform import python_version as y
from sys import argv

from pyrogram import __version__ as pyrover
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, Update
from telegram import __version__ as telever
from telegram.error import (
    BadRequest,
    ChatMigrated,
    NetworkError,
    TelegramError,
    TimedOut,
    Unauthorized,
)
from telegram.ext import (
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    Filters,
    MessageHandler,
)
from telegram.ext.dispatcher import DispatcherHandlerStop
from telegram.utils.helpers import escape_markdown
from telethon import __version__ as tlhver

import FallenRobot.modules.sql.users_sql as sql
from FallenRobot import (
    DarkXmusicBot,
    DarkXmusicRooBot,
    4830372686,
    7864928204,
    START_IMG,
    4830372686,
    8098449558:AAHjYuRTSl3UOQ1d0D2C_W8hI5nguoap_B0,
    StartTime,
    dispatcher,
    pbot,
    telethn,
    updater,
)
from FallenRobot.modules import ALL_MODULES
from FallenRobot.modules.helper_funcs.chat_status import is_user_admin
from FallenRobot.modules.helper_funcs.misc import paginate_modules


def get_readable_time(seconds: int) -> str:
    count = 0
    ping_time = ""
    time_list = []
    time_suffix_list = ["s", "m", "h", "days"]

    while count < 4:
        count += 1
        remainder, result = divmod(seconds, 60) if count < 3 else divmod(seconds, 24)
        if seconds == 0 and remainder == 0:
            break
        time_list.append(int(result))
        seconds = int(remainder)

    for x in range(len(time_list)):
        time_list[x] = str(time_list[x]) + time_suffix_list[x]
    if len(time_list) == 4:
        ping_time += time_list.pop() + ", "

    time_list.reverse()
    ping_time += ":".join(time_list)

    return ping_time


PM_START_TEXT = """
* ú·¥á è* {}, ü•Ä

*‡πè ·¥õ ú…™s …™s* {} !
‚ûª ·¥õ ú·¥á ·¥ç·¥ès·¥õ ·¥©·¥è·¥°·¥á Ä“ì·¥ú ü ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç …¢ Ä·¥è·¥ú·¥© ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ  ô·¥è·¥õ ·¥°…™·¥õ ú s·¥è·¥ç·¥á ·¥Ä·¥°·¥ás·¥è·¥ç·¥á ·¥Ä…¥·¥Ö ·¥ús·¥á“ì·¥ú ü “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás.

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
*‡πè ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ú·¥á ü·¥©  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è …¢·¥á·¥õ …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ ·¥ç è ·¥ç·¥è·¥Ö·¥ú ü·¥ás ·¥Ä…¥·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös.*
"""

buttons = [
    [
        InlineKeyboardButton(
            text="·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò",
            url=f"https://t.me/{BOT_USERNAME}?startgroup=true",
        ),
    ],
    [
        InlineKeyboardButton(text=" ú·¥á ü·¥© & ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös", callback_data="help_back"),
    ],
    [
        InlineKeyboardButton(text="‚ùÑ ·¥Ä ô·¥è·¥ú·¥õ ‚ùÑ", callback_data="fallen_"),
        InlineKeyboardButton(text="‚ú® s·¥ú·¥©·¥©·¥è Ä·¥õ ‚ú®", url=f"https://t.me/{SUPPORT_CHAT}"),
    ],
    [
        InlineKeyboardButton(text="ü•Ä ·¥Ö·¥á·¥†·¥á ü·¥è·¥©·¥á Ä ü•Ä", url=f"tg://user?id={OWNER_ID}"),
        InlineKeyboardButton(text="‚òÅÔ∏è s·¥è·¥ú Ä·¥Ñ·¥á ‚òÅÔ∏è", callback_data="source_"),
    ],
]

HELP_STRINGS = f"""
*¬ª {BOT_NAME} ·¥áx·¥Ñ ü·¥ús…™·¥†·¥á Íú∞·¥á·¥Ä·¥õ·¥ú Ä·¥ás*

‚û≤ /start : Íú±·¥õ·¥Ä Ä·¥õÍú± ·¥ç·¥á | ·¥Ä·¥Ñ·¥Ñ·¥è Ä·¥Ö…™…¥…¢ ·¥õ·¥è ·¥ç·¥á  è·¥è·¥ú'·¥†·¥á ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ö·¥è…¥·¥á …™·¥õ.
‚û≤ /help  : ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± Íú±·¥á·¥Ñ·¥õ…™·¥è…¥.
  ‚Ä£ …™…¥ ·¥ò·¥ç : ·¥°…™ ü ü Íú±·¥á…¥·¥Ö  è·¥è·¥ú  ú·¥á ü·¥ò Íú∞·¥è Ä ·¥Ä ü ü Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö ·¥ç·¥è·¥Ö·¥ú ü·¥áÍú±.
  ‚Ä£ …™…¥ …¢ Ä·¥è·¥ú·¥ò : ·¥°…™ ü ü  Ä·¥á·¥Ö…™ Ä·¥á·¥Ñ·¥õ  è·¥è·¥ú ·¥õ·¥è ·¥ò·¥ç, ·¥°…™·¥õ ú ·¥Ä ü ü ·¥õ ú·¥Ä·¥õ  ú·¥á ü·¥ò ·¥ç·¥è·¥Ö·¥ú ü·¥áÍú±."""

IMPORTED = {}
MIGRATEABLE = []
HELPABLE = {}
STATS = []
USER_INFO = []
DATA_IMPORT = []
DATA_EXPORT = []
CHAT_SETTINGS = {}
USER_SETTINGS = {}

for module_name in ALL_MODULES:
    imported_module = importlib.import_module("FallenRobot.modules." + module_name)
    if not hasattr(imported_module, "__mod_name__"):
        imported_module.__mod_name__ = imported_module.__name__

    if imported_module.__mod_name__.lower() not in IMPORTED:
        IMPORTED[imported_module.__mod_name__.lower()] = imported_module
    else:
        raise Exception("Can't have two modules with the same name! Please change one")

    if hasattr(imported_module, "__help__") and imported_module.__help__:
        HELPABLE[imported_module.__mod_name__.lower()] = imported_module

    # Chats to migrate on chat_migrated events
    if hasattr(imported_module, "__migrate__"):
        MIGRATEABLE.append(imported_module)

    if hasattr(imported_module, "__stats__"):
        STATS.append(imported_module)

    if hasattr(imported_module, "__user_info__"):
        USER_INFO.append(imported_module)

    if hasattr(imported_module, "__import_data__"):
        DATA_IMPORT.append(imported_module)

    if hasattr(imported_module, "__export_data__"):
        DATA_EXPORT.append(imported_module)

    if hasattr(imported_module, "__chat_settings__"):
        CHAT_SETTINGS[imported_module.__mod_name__.lower()] = imported_module

    if hasattr(imported_module, "__user_settings__"):
        USER_SETTINGS[imported_module.__mod_name__.lower()] = imported_module


# do not async
def send_help(chat_id, text, keyboard=None):
    if not keyboard:
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))
    dispatcher.bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True,
        reply_markup=keyboard,
    )


def start(update: Update, context: CallbackContext):
    args = context.args
    uptime = get_readable_time((time.time() - StartTime))
    if update.effective_chat.type == "private":
        if len(args) >= 1:
            if args[0].lower() == "help":
                send_help(update.effective_chat.id, HELP_STRINGS)
            elif args[0].lower().startswith("ghelp_"):
                mod = args[0].lower().split("_", 1)[1]
                if not HELPABLE.get(mod, False):
                    return
                send_help(
                    update.effective_chat.id,
                    HELPABLE[mod].__help__,
                    InlineKeyboardMarkup(
                        [[InlineKeyboardButton(text="‚óÅ", callback_data="help_back")]]
                    ),
                )

            elif args[0].lower() == "markdownhelp":
                IMPORTED["ex·¥õ Ä·¥Äs"].markdown_help_sender(update)
            elif args[0].lower().startswith("stngs_"):
                match = re.match("stngs_(.*)", args[0].lower())
                chat = dispatcher.bot.getChat(match.group(1))

                if is_user_admin(chat, update.effective_user.id):
                    send_settings(match.group(1), update.effective_user.id, False)
                else:
                    send_settings(match.group(1), update.effective_user.id, True)

            elif args[0][1:].isdigit() and "r·¥ú ü·¥ás" in IMPORTED:
                IMPORTED["r·¥ú ü·¥ás"].send_rules(update, args[0], from_pm=True)

        else:
            first_name = update.effective_user.first_name
            update.effective_message.reply_sticker(
                "CAACAgUAAxkBAAJYsmLWRvm70cE-mmxSNCovEf4v1ueJAAIcCAACbMK4VuL4EmZEkq8WKQQ"
            )
            update.effective_message.reply_text(
                PM_START_TEXT.format(escape_markdown(first_name), BOT_NAME),
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode=ParseMode.MARKDOWN,
                timeout=60,
            )
    else:
        update.effective_message.reply_photo(
            START_IMG,
            caption="…™ ·¥Ä·¥ç ·¥Ä ü…™·¥†·¥á  ô·¥Ä ô è !\n<b>…™ ·¥Ö…™·¥Ö…¥'·¥õ s ü·¥á·¥ò·¥õ s…™…¥·¥Ñ·¥á‚Äã:</b> <code>{}</code>".format(
                uptime
            ),
            parse_mode=ParseMode.HTML,
        )


def error_handler(update, context):
    """Log the error and send a telegram message to notify the developer."""
    # Log the error before we do anything else, so we can see it even if something breaks.
    LOGGER.error(msg="Exception while handling an update:", exc_info=context.error)

    # traceback.format_exception returns the usual python message about an exception, but as a
    # list of strings rather than a single string, so we have to join them together.
    tb_list = traceback.format_exception(
        None, context.error, context.error.__traceback__
    )
    tb = "".join(tb_list)

    # Build the message with some markup and additional information about what happened.
    message = (
        "An exception was raised while handling an update\n"
        "<pre>update = {}</pre>\n\n"
        "<pre>{}</pre>"
    ).format(
        html.escape(json.dumps(update.to_dict(), indent=2, ensure_ascii=False)),
        html.escape(tb),
    )

    if len(message) >= 4096:
        message = message[:4096]
    # Finally, send the message
    context.bot.send_message(chat_id=OWNER_ID, text=message, parse_mode=ParseMode.HTML)


# for test purposes
def error_callback(update: Update, context: CallbackContext):
    error = context.error
    try:
        raise error
    except Unauthorized:
        print("no nono1")
        print(error)
        # remove update.message.chat_id from conversation list
    except BadRequest:
        print("no nono2")
        print("BadRequest caught")
        print(error)

        # handle malformed requests - read more below!
    except TimedOut:
        print("no nono3")
        # handle slow connection problems
    except NetworkError:
        print("no nono4")
        # handle other connection problems
    except ChatMigrated as err:
        print("no nono5")
        print(err)
        # the chat_id of a group has changed, use e.new_chat_id instead
    except TelegramError:
        print(error)
        # handle all other telegram related errors


def help_button(update, context):
    query = update.callback_query
    mod_match = re.match(r"help_module\((.+?)\)", query.data)
    prev_match = re.match(r"help_prev\((.+?)\)", query.data)
    next_match = re.match(r"help_next\((.+?)\)", query.data)
    back_match = re.match(r"help_back", query.data)

    print(query.message.chat.id)

    try:
        if mod_match:
            module = mod_match.group(1)
            text = (
                "¬ª *·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös Íú∞·¥è Ä* *{}* :\n".format(
                    HELPABLE[module].__mod_name__
                )
                + HELPABLE[module].__help__
            )
            query.message.edit_text(
                text=text,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton(text="‚óÅ", callback_data="help_back")]]
                ),
            )

        elif prev_match:
            curr_page = int(prev_match.group(1))
            query.message.edit_text(
                text=HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(curr_page - 1, HELPABLE, "help")
                ),
            )

        elif next_match:
            next_page = int(next_match.group(1))
            query.message.edit_text(
                text=HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(next_page + 1, HELPABLE, "help")
                ),
            )

        elif back_match:
            query.message.edit_text(
                text=HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, HELPABLE, "help")
                ),
            )

        context.bot.answer_callback_query(query.id)

    except BadRequest:
        pass


def Fallen_about_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "fallen_":
        uptime = get_readable_time((time.time() - StartTime))
        query.message.edit_text(
            text=f"* ú·¥á è,*ü•Ä\n  *·¥õ ú…™s …™s {BOT_NAME}*"
            "\n*·¥Ä ·¥ò·¥è·¥°·¥á ÄÍú∞·¥ú ü …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ  ô·¥è·¥õ  ô·¥ú…™ ü·¥õ ·¥õ·¥è  ú·¥á ü·¥ò  è·¥è·¥ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥á·¥ÄÍú±…™ ü è ·¥Ä…¥·¥Ö ·¥õ·¥è ·¥ò Ä·¥è·¥õ·¥á·¥Ñ·¥õ  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò Íú∞ Ä·¥è·¥ç Íú±·¥Ñ·¥Ä·¥ç·¥ç·¥á ÄÍú± ·¥Ä…¥·¥Ö Íú±·¥ò·¥Ä·¥ç·¥ç·¥á ÄÍú±.*"
            "\n*·¥° Ä…™·¥õ·¥õ·¥á…¥ …™…¥ ·¥© è·¥õ ú·¥è…¥ ·¥°…™·¥õ ú s«´ ü·¥Ä ü·¥Ñ ú·¥á·¥ç è ·¥Ä…¥·¥Ö ·¥ç·¥è…¥…¢·¥è·¥Ö ô ·¥Äs ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á.*"
            "\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            f"\n*‚ûª ·¥ú·¥©·¥õ…™·¥ç·¥á ¬ª* {uptime}"
            f"\n*‚ûª ·¥ús·¥á Äs ¬ª* {sql.num_users()}"
            f"\n*‚ûª ·¥Ñ ú·¥Ä·¥õs ¬ª* {sql.num_chats()}"
            "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            "\n\n‚û≤  …™ ·¥Ñ·¥Ä…¥  Ä·¥áÍú±·¥õ Ä…™·¥Ñ·¥õ ·¥úÍú±·¥á ÄÍú±."
            "\n‚û≤  …™  ú·¥Ä·¥†·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á·¥Ö ·¥Ä…¥·¥õ…™-Íú∞ ü·¥è·¥è·¥Ö Íú± èÍú±·¥õ·¥á·¥ç."
            "\n‚û≤  …™ ·¥Ñ·¥Ä…¥ …¢ Ä·¥á·¥á·¥õ ·¥úÍú±·¥á ÄÍú± ·¥°…™·¥õ ú ·¥Ñ·¥úÍú±·¥õ·¥è·¥ç…™·¥¢·¥Ä ô ü·¥á ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥áÍú± ·¥Ä…¥·¥Ö ·¥á·¥†·¥á…¥ Íú±·¥á·¥õ ·¥Ä …¢ Ä·¥è·¥ú·¥ò'Íú±  Ä·¥ú ü·¥áÍú±."
            "\n‚û≤  …™ ·¥Ñ·¥Ä…¥ ·¥°·¥Ä Ä…¥ ·¥úÍú±·¥á ÄÍú± ·¥ú…¥·¥õ…™ ü ·¥õ ú·¥á è  Ä·¥á·¥Ä·¥Ñ ú ·¥ç·¥Äx ·¥°·¥Ä Ä…¥Íú±, ·¥°…™·¥õ ú ·¥á·¥Ä·¥Ñ ú ·¥ò Ä·¥á·¥Ö·¥áÍú∞…™…¥·¥á·¥Ö ·¥Ä·¥Ñ·¥õ…™·¥è…¥Íú± Íú±·¥ú·¥Ñ ú ·¥ÄÍú±  ô·¥Ä…¥, ·¥ç·¥ú·¥õ·¥á, ·¥ã…™·¥Ñ·¥ã, ·¥á·¥õ·¥Ñ."
            "\n‚û≤  …™  ú·¥Ä·¥†·¥á ·¥Ä …¥·¥è·¥õ·¥á ·¥ã·¥á·¥á·¥ò…™…¥…¢ Íú± èÍú±·¥õ·¥á·¥ç,  ô ü·¥Ä·¥Ñ·¥ã ü…™Íú±·¥õÍú±, ·¥Ä…¥·¥Ö ·¥á·¥†·¥á…¥ ·¥ò Ä·¥á·¥Ö·¥á·¥õ·¥á Ä·¥ç…™…¥·¥á·¥Ö  Ä·¥á·¥ò ü…™·¥áÍú± ·¥è…¥ ·¥Ñ·¥á Ä·¥õ·¥Ä…™…¥ ·¥ã·¥á è·¥°·¥è Ä·¥ÖÍú±."
            f"\n\n‚ûª ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s …¢…™·¥†·¥á…¥  ô·¥á ü·¥è·¥° “ì·¥è Ä …¢·¥á·¥õ·¥õ…™…¥…¢  ô·¥Äs…™·¥Ñ  ú·¥á ü·¥© ·¥Ä…¥·¥Ö …™…¥“ì·¥è ·¥Ä ô·¥è·¥ú·¥õ {BOT_NAME}.",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="s·¥ú·¥©·¥©·¥è Ä·¥õ", callback_data="fallen_support"
                        ),
                        InlineKeyboardButton(
                            text="·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös", callback_data="help_back"
                        ),
                    ],
                    [
                        InlineKeyboardButton(
                            text="·¥Ö·¥á·¥†·¥á ü·¥è·¥©·¥á Ä", url=f"tg://user?id={OWNER_ID}"
                        ),
                        InlineKeyboardButton(
                            text="s·¥è·¥ú Ä·¥Ñ·¥á",
                            callback_data="source_",
                        ),
                    ],
                    [
                        InlineKeyboardButton(text="‚óÅ", callback_data="fallen_back"),
                    ],
                ]
            ),
        )
    elif query.data == "fallen_support":
        query.message.edit_text(
            text="*‡πè ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s …¢…™·¥†·¥á…¥  ô·¥á ü·¥è·¥° ·¥õ·¥è …¢·¥á·¥õ  ú·¥á ü·¥© ·¥Ä…¥·¥Ö ·¥ç·¥è Ä·¥á …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ ·¥ç·¥á.*"
            f"\n\n…™“ì  è·¥è·¥ú “ì·¥è·¥ú…¥·¥Ö ·¥Ä…¥ è  ô·¥ú…¢ …™…¥ {BOT_NAME} ·¥è Ä …™“ì  è·¥è·¥ú ·¥°·¥Ä…¥…¥·¥Ä …¢…™·¥†·¥á “ì·¥á·¥á·¥Ö ô·¥Ä·¥Ñ·¥ã ·¥Ä ô·¥è·¥ú·¥õ ·¥õ ú·¥á {BOT_NAME}, ·¥© ü·¥á·¥Äs·¥á  Ä·¥á·¥©·¥è Ä·¥õ …™·¥õ ·¥Ä·¥õ s·¥ú·¥©·¥©·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="s·¥ú·¥©·¥©·¥è Ä·¥õ", url=f"https://t.me/{SUPPORT_CHAT}"
                        ),
                        InlineKeyboardButton(
                            text="·¥ú·¥©·¥Ö·¥Ä·¥õ·¥ás", url=f"https://t.me/{SUPPORT_CHAT}"
                        ),
                    ],
                    [
                        InlineKeyboardButton(
                            text="·¥Ö·¥á·¥†·¥á ü·¥è·¥©·¥á Ä", url=f"tg://user?id={OWNER_ID}"
                        ),
                        InlineKeyboardButton(
                            text="…¢…™·¥õ ú·¥ú ô",
                            url="https://github.com/AnnymousX1025",
                        ),
                    ],
                    [
                        InlineKeyboardButton(text="‚óÅ", callback_data="fallen_"),
                    ],
                ]
            ),
        )
    elif query.data == "fallen_back":
        first_name = update.effective_user.first_name
        query.message.edit_text(
            PM_START_TEXT.format(escape_markdown(first_name), BOT_NAME),
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.MARKDOWN,
            timeout=60,
            disable_web_page_preview=True,
        )


def Source_about_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "source_":
        query.message.edit_text(
            text=f"""
* ú·¥á è,
 ·¥õ ú…™s …™s {BOT_NAME},
·¥Ä…¥ ·¥è·¥©·¥á…¥ s·¥è·¥ú Ä·¥Ñ·¥á ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç …¢ Ä·¥è·¥ú·¥© ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ  ô·¥è·¥õ.*

·¥° Ä…™·¥õ·¥õ·¥á…¥ …™…¥ ·¥© è·¥õ ú·¥è…¥ ·¥°…™·¥õ ú ·¥õ ú·¥á  ú·¥á ü·¥© ·¥è“ì : [·¥õ·¥á ü·¥á·¥õ ú·¥è…¥](https://github.com/LonamiWebs/Telethon)
[·¥© è Ä·¥è…¢ Ä·¥Ä·¥ç](https://github.com/pyrogram/pyrogram)
[·¥© è·¥õ ú·¥è…¥-·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç- ô·¥è·¥õ](https://github.com/python-telegram-bot/python-telegram-bot)
·¥Ä…¥·¥Ö ·¥ús…™…¥…¢ [s«´ ü·¥Ä ü·¥Ñ ú·¥á·¥ç è](https://www.sqlalchemy.org) ·¥Ä…¥·¥Ö [·¥ç·¥è…¥…¢·¥è](https://cloud.mongodb.com) ·¥Äs ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á.


* ú·¥á Ä·¥á …™s ·¥ç è s·¥è·¥ú Ä·¥Ñ·¥á ·¥Ñ·¥è·¥Ö·¥á :* […¢…™·¥õ ú·¥ú ô](https://github.com/AnonymousX1025/FallenRobot)


{BOT_NAME} …™s  ü…™·¥Ñ·¥á…¥s·¥á·¥Ö ·¥ú…¥·¥Ö·¥á Ä ·¥õ ú·¥á [·¥ç…™·¥õ  ü…™·¥Ñ·¥á…¥s·¥á](https://github.com/AnonymousX1025/FallenRobot/blob/master/LICENSE).
¬© 2022 - 2023 | [s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ](https://t.me/{SUPPORT_CHAT}), ·¥Ä ü ü  Ä…™…¢ ú·¥õs  Ä·¥ás·¥á Ä·¥†·¥á·¥Ö.
""",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton(text="‚óÅ", callback_data="source_back")]]
            ),
        )
    elif query.data == "source_back":
        first_name = update.effective_user.first_name
        query.message.edit_text(
            PM_START_TEXT.format(escape_markdown(first_name), BOT_NAME),
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.MARKDOWN,
            timeout=60,
            disable_web_page_preview=True,
        )


def get_help(update: Update, context: CallbackContext):
    chat = update.effective_chat  # type: Optional[Chat]
    args = update.effective_message.text.split(None, 1)

    # ONLY send help in PM
    if chat.type != chat.PRIVATE:
        if len(args) >= 2 and any(args[1].lower() == x for x in HELPABLE):
            module = args[1].lower()
            update.effective_message.reply_text(
                f"Contact me in PM to get help of {module.capitalize()}",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text=" ú·¥á ü·¥ò",
                                url="https://t.me/{}?start=ghelp_{}".format(
                                    context.bot.username, module
                                ),
                            )
                        ]
                    ]
                ),
            )
            return
        update.effective_message.reply_text(
            "¬ª ·¥Ñ ú·¥è·¥ès·¥á ·¥Ä…¥ ·¥è·¥©·¥õ…™·¥è…¥ “ì·¥è Ä …¢·¥á·¥õ·¥õ…™…¥…¢  ú·¥á ü·¥©.",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="·¥è·¥©·¥á…¥ …™…¥ ·¥© Ä…™·¥†·¥Ä·¥õ·¥á",
                            url="https://t.me/{}?start=help".format(
                                context.bot.username
                            ),
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="·¥è·¥©·¥á…¥  ú·¥á Ä·¥á",
                            callback_data="help_back",
                        )
                    ],
                ]
            ),
        )
        return

    elif len(args) >= 2 and any(args[1].lower() == x for x in HELPABLE):
        module = args[1].lower()
        text = (
            "Here is the available help for the *{}* module:\n".format(
                HELPABLE[module].__mod_name__
            )
            + HELPABLE[module].__help__
        )
        send_help(
            chat.id,
            text,
            InlineKeyboardMarkup(
                [[InlineKeyboardButton(text="‚óÅ", callback_data="help_back")]]
            ),
        )

    else:
        send_help(chat.id, HELP_STRINGS)


def send_settings(chat_id, user_id, user=False):
    if user:
        if USER_SETTINGS:
            settings = "\n\n".join(
                "*{}*:\n{}".format(mod.__mod_name__, mod.__user_settings__(user_id))
                for mod in USER_SETTINGS.values()
            )
            dispatcher.bot.send_message(
                user_id,
                "These are your current settings:" + "\n\n" + settings,
                parse_mode=ParseMode.MARKDOWN,
            )

        else:
            dispatcher.bot.send_message(
                user_id,
                "Seems like there aren't any user specific settings available :'(",
                parse_mode=ParseMode.MARKDOWN,
            )

    else:
        if CHAT_SETTINGS:
            chat_name = dispatcher.bot.getChat(chat_id).title
            dispatcher.bot.send_message(
                user_id,
                text="Which module would you like to check {}'s settings for?".format(
                    chat_name
                ),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, CHAT_SETTINGS, "stngs", chat=chat_id)
                ),
            )
        else:
            dispatcher.bot.send_message(
                user_id,
                "Seems like there aren't any chat settings available :'(\nSend this "
                "in a group chat you're admin in to find its current settings!",
                parse_mode=ParseMode.MARKDOWN,
            )


def settings_button(update: Update, context: CallbackContext):
    query = update.callback_query
    user = update.effective_user
    bot = context.bot
    mod_match = re.match(r"stngs_module\((.+?),(.+?)\)", query.data)
    prev_match = re.match(r"stngs_prev\((.+?),(.+?)\)", query.data)
    next_match = re.match(r"stngs_next\((.+?),(.+?)\)", query.data)
    back_match = re.match(r"stngs_back\((.+?)\)", query.data)
    try:
        if mod_match:
            chat_id = mod_match.group(1)
            module = mod_match.group(2)
            chat = bot.get_chat(chat_id)
            text = "*{}* has the following settings for the *{}* module:\n\n".format(
                escape_markdown(chat.title), CHAT_SETTINGS[module].__mod_name__
            ) + CHAT_SETTINGS[module].__chat_settings__(chat_id, user.id)
            query.message.reply_text(
                text=text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="‚óÅ",
                                callback_data="stngs_back({})".format(chat_id),
                            )
                        ]
                    ]
                ),
            )

        elif prev_match:
            chat_id = prev_match.group(1)
            curr_page = int(prev_match.group(2))
            chat = bot.get_chat(chat_id)
            query.message.reply_text(
                "Hi there! There are quite a few settings for {} - go ahead and pick what "
                "you're interested in.".format(chat.title),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(
                        curr_page - 1, CHAT_SETTINGS, "stngs", chat=chat_id
                    )
                ),
            )

        elif next_match:
            chat_id = next_match.group(1)
            next_page = int(next_match.group(2))
            chat = bot.get_chat(chat_id)
            query.message.reply_text(
                "Hi there! There are quite a few settings for {} - go ahead and pick what "
                "you're interested in.".format(chat.title),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(
                        next_page + 1, CHAT_SETTINGS, "stngs", chat=chat_id
                    )
                ),
            )

        elif back_match:
            chat_id = back_match.group(1)
            chat = bot.get_chat(chat_id)
            query.message.reply_text(
                text="Hi there! There are quite a few settings for {} - go ahead and pick what "
                "you're interested in.".format(escape_markdown(chat.title)),
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, CHAT_SETTINGS, "stngs", chat=chat_id)
                ),
            )

        # ensure no spinny white circle
        bot.answer_callback_query(query.id)
        query.message.delete()
    except BadRequest as excp:
        if excp.message not in [
            "Message is not modified",
            "Query_id_invalid",
            "Message can't be deleted",
        ]:
            LOGGER.exception("Exception in settings buttons. %s", str(query.data))


def get_settings(update: Update, context: CallbackContext):
    chat = update.effective_chat  # type: Optional[Chat]
    user = update.effective_user  # type: Optional[User]
    msg = update.effective_message  # type: Optional[Message]

    # ONLY send settings in PM
    if chat.type != chat.PRIVATE:
        if is_user_admin(chat, user.id):
            text = "Click here to get this chat's settings, as well as yours."
            msg.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="s·¥á·¥õ·¥õ…™…¥…¢s",
                                url="t.me/{}?start=stngs_{}".format(
                                    context.bot.username, chat.id
                                ),
                            )
                        ]
                    ]
                ),
            )
        else:
            text = "Click here to check your settings."

    else:
        send_settings(chat.id, user.id, True)


def migrate_chats(update: Update, context: CallbackContext):
    msg = update.effective_message  # type: Optional[Message]
    if msg.migrate_to_chat_id:
        old_chat = update.effective_chat.id
        new_chat = msg.migrate_to_chat_id
    elif msg.migrate_from_chat_id:
        old_chat = msg.migrate_from_chat_id
        new_chat = update.effective_chat.id
    else:
        return

    LOGGER.info("Migrating from %s, to %s", str(old_chat), str(new_chat))
    for mod in MIGRATEABLE:
        mod.__migrate__(old_chat, new_chat)

    LOGGER.info("Successfully migrated!")
    raise DispatcherHandlerStop


def main():
    if SUPPORT_CHAT is not None and isinstance(SUPPORT_CHAT, str):
        try:
            dispatcher.bot.send_photo(
                chat_id=f"@{SUPPORT_CHAT}",
                photo=START_IMG,
                caption=f"""
„Ö§ü•Ä {BOT_NAME} …™s ·¥Ä ü…™·¥†·¥á  ô·¥Ä ô è...

‚îè‚Ä¢‚ùÖ‚îÄ‚îÄ‚îÄ‚îÄ‚úß‚ùÖ‚ú¶‚ùÖ‚úß‚îÄ‚îÄ‚îÄ‚îÄ‚ùÖ‚Ä¢‚îì
„Ö§‚òÖ **·¥ò è·¥õ ú·¥è…¥ :** `{y()}`
„Ö§‚òÖ ** ü…™ ô Ä·¥Ä Ä è :** `{telever}`
„Ö§‚òÖ **·¥õ·¥á ü·¥á·¥õ ú·¥è…¥ :** `{tlhver}`
„Ö§‚òÖ **·¥© è Ä·¥è…¢ Ä·¥Ä·¥ç :** `{pyrover}`
‚îó‚Ä¢‚ùÖ‚îÄ‚îÄ‚îÄ‚îÄ‚úß‚ùÖ‚ú¶‚ùÖ‚úß‚îÄ‚îÄ‚îÄ‚îÄ‚ùÖ‚Ä¢‚îõ""",
                parse_mode=ParseMode.MARKDOWN,
            )
        except Unauthorized:
            LOGGER.warning(
                f"Bot isn't able to send message to @{SUPPORT_CHAT}, go and check!"
            )
        except BadRequest as e:
            LOGGER.warning(e.message)

    start_handler = CommandHandler("start", start, run_async=True)

    help_handler = CommandHandler("help", get_help, run_async=True)
    help_callback_handler = CallbackQueryHandler(
        help_button, pattern=r"help_.*", run_async=True
    )

    settings_handler = CommandHandler("settings", get_settings, run_async=True)
    settings_callback_handler = CallbackQueryHandler(
        settings_button, pattern=r"stngs_", run_async=True
    )

    about_callback_handler = CallbackQueryHandler(
        Fallen_about_callback, pattern=r"fallen_", run_async=True
    )
    source_callback_handler = CallbackQueryHandler(
        Source_about_callback, pattern=r"source_", run_async=True
    )

    migrate_handler = MessageHandler(Filters.status_update.migrate, migrate_chats)

    dispatcher.add_handler(start_handler)
    dispatcher.add_handler(help_handler)
    dispatcher.add_handler(about_callback_handler)
    dispatcher.add_handler(source_callback_handler)
    dispatcher.add_handler(settings_handler)
    dispatcher.add_handler(help_callback_handler)
    dispatcher.add_handler(settings_callback_handler)
    dispatcher.add_handler(migrate_handler)

    dispatcher.add_error_handler(error_callback)

    LOGGER.info("Using long polling.")
    updater.start_polling(timeout=15, read_latency=4, drop_pending_updates=True)

    if len(argv) not in (1, 3, 4):
        telethn.disconnect()
    else:
        telethn.run_until_disconnected()

    updater.idle()


if __name__ == "__main__":
    LOGGER.info("Successfully loaded modules: " + str(ALL_MODULES))
    telethn.start(bot_token=TOKEN)
    pbot.start()
    main()
